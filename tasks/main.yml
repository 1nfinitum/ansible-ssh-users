---
- name: Adding groups.
  group:
    gid: "{{ item.gid | default(omit) }}"
    name: "{{ item.name }}"
    state: "{{ item.state | default('present') }}"
    system: "{{ item.system | default(omit) }}"
  when: users_add_group is defined
  with_items: "{{ users_add_group }}"

- name: Ensuring primary group existence.
  group:
    name: "{{ item.group|d(users_default_group) }}"
  when: users_add is defined
  with_items: "{{ users_add }}"
  loop_control:
    label: "{{ item.group|d(none) }}"

- name: Adding users.
  user:
    append: "{{ item.append | d(omit) }}"
    comment: "{{ item.comment | d(omit) }}"
    createhome: "{{ item.createhome | d(omit) }}"
    expires: "{{ item.expires | d(omit) }}"
    force: "{{ item.force | d(omit) }}"
    generate_ssh_key: "{{ item.generate_ssh_key | d(omit) }}"
    group: "{{ item.group | d(users_default_group) }}"
    groups: "{{ item.groups | d(omit) }}"
    home: "{{ item.home | d(omit) }}"
    login_class: "{{ item.login_class | d(omit) }}"
    move_home: "{{ item.move_home | d(omit) }}"
    name: "{{ item.user }}"
    non_unique: "{{ item.non_unique | d(omit) }}"
    password: "{{ item.password | d(omit) }}"
    remove: "{{ item.remove | d(omit) }}"
    seuser: "{{ item.seuser | d(omit) }}"
    shell: "{{ item.shell | d(users_default_shell) }}"
    skeleton: "{{ item.skeleton|default(omit) if item.createhome is not defined or item.createhome == 'yes' else omit }}"
    ssh_key_bits: "{{ item.ssh_key_bits | d(omit) }}"
    ssh_key_file: "{{ item.ssh_key_file | d(omit) }}"
    ssh_key_passphrase: "{{ item.ssh_key_passphrase | d(omit) }}"
    ssh_key_type: "{{ item.ssh_key_type | d(omit) }}"
    state: "{{ item.state | d(omit) }}"
    system: "{{ item.system | d(omit) }}"
    uid: "{{ item.uid | d(omit) }}"
    update_password: "{{ item.update_password | d(omit) }}"
  when: users_add is defined
  with_items:
    - "{{ users_add }}"
  loop_control:
    label: "{{ item.user }}"

- name: Adding authentication keys.
  authorized_key:
    exclusive: "{{ item.exclusive | d(omit) }}"
    key: "{{ item.1 }}"
    key_options: "{{ item.key_options | d(omit) }}"
    manage_dir: "{{ item.manage_dir | d(omit) }}"
    path: "{{ item.path | d(omit) }}"
    state: "{{ item.0.state | d(omit) }}"
    user: "{{ item.0.user }}"
    validate_certs: "{{ item.validate_certs | d(omit) }}"
  with_subelements:
    - "{{ users_add|d([]) + users_add_authorized_keys|d([]) }}"
    - ssh_pub_key
    - skip_missing: yes
  loop_control:
    label: "{{ item.0.user }}"

- name: Add configured user accounts to passwordless sudoers.
  lineinfile:
    dest: /etc/sudoers
    regexp: '^{{ item.user }}'
    line: "{{ item.user }} ALL=(ALL) {{ 'NOPASSWD: ' if item.sudoer == 'passwordless' else none }}ALL"
    state: present
    validate: 'visudo -cf %s'
  with_items: "{{ users_add }}"
  loop_control:
    label: "{{ item.user }}"
  when:
    - item is defined
    - item.sudoer is defined
    - item.sudoer == true or item.sudoer == "passwordless" or item.sudoer == "passworded"
